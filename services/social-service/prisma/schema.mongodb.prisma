generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//=============================================================================
// ENUMS
//=============================================================================

enum MediaResize {
  MEDIA_RESIZE_UNSPECIFIED
  MEDIA_RESIZE_CLIP
  MEDIA_RESIZE_CROP
  MEDIA_RESIZE_SCALE
}

enum MediaCrop {
  MEDIA_RESIZE_UNSPECIFIED
  MEDIA_CROP_TOP
  MEDIA_CROP_BOTTOM
  MEDIA_CROP_LEFT
  MEDIA_CROP_RIGHT
  MEDIA_CROP_CENTER
}

enum MediaType {
  MEDIA_TYPE_UNSPECIFIED
  MEDIA_TYPE_IMAGE
  MEDIA_TYPE_VIDEO
  MEDIA_TYPE_AUDIO
  MEDIA_TYPE_DOCUMENT
  MEDIA_TYPE_SPREADSHEET
  MEDIA_TYPE_PRESENTATION
  MEDIA_TYPE_PDF
  MEDIA_TYPE_CODE
  MEDIA_TYPE_ZIP
  MEDIA_TYPE_3D
  MEDIA_TYPE_AR
  MEDIA_TYPE_CAD
  MEDIA_TYPE_VECTOR
}

enum PostType {
  POST_TYPE_UNSPECIFIED
  POST_TYPE_POST
  POST_TYPE_REPOST
  POST_TYPE_QUESTION
  POST_TYPE_ACHIEVEMENT
  POST_TYPE_ANNOUNCEMENT
  POST_TYPE_POLL
  POST_TYPE_ARTICLE
  POST_TYPE_SHORT_STORY
}

enum AccountType {
  ACCOUNT_TYPE_UNSPECIFIED
  ACCOUNT_TYPE_USER
  ACCOUNT_TYPE_COMMUNITY
}

enum ThreadParticipantType {
  THREAD_PARTICIPANT_TYPE_UNSPECIFIED
  THREAD_PARTICIPANT_TYPE_PARENT
  THREAD_PARTICIPANT_TYPE_PARTICIPANT
}

enum Reaction {
  REACTION_UNSPECIFIED
  REACTION_LIKE
  REACTION_LOVE
  REACTION_HAHA
  REACTION_WOW
  REACTION_SAD
  REACTION_ANGRY
  REACTION_DISLIKE
}

enum Category {
  CATEGORY_UNSPECIFIED
  CATEGORY_WORLD
  CATEGORY_BUSINESS
  CATEGORY_ECONOMICS
  CATEGORY_FOREIGN_POLICY
  CATEGORY_POLITICS
  CATEGORY_TECHNOLOGY
  CATEGORY_OTHER
}

enum SpaceType {
  SPACE_TYPE_UNSPECIFIED
  SPACE_TYPE_TEAM
  SPACE_TYPE_PROJECT
  SPACE_TYPE_DEPARTMENT
  SPACE_TYPE_ANNOUNCEMENT
  SPACE_TYPE_KNOWLEDGE_BASE
  SPACE_TYPE_SOCIAL
  SPACE_TYPE_LEARNING
  SPACE_TYPE_INNOVATION
}

enum AIModelType {
  AI_MODEL_UNSPECIFIED
  AI_MODEL_TEXT
  AI_MODEL_IMAGE
  AI_MODEL_AUDIO
  AI_MODEL_CODE
  AI_MODEL_TRANSLATION
  AI_MODEL_SUMMARIZATION
}

enum AccessLevel {
  ACCESS_LEVEL_PUBLIC
  ACCESS_LEVEL_PRIVATE
  ACCESS_LEVEL_RESTRICTED
  ACCESS_LEVEL_ORGANIZATION
}

//=============================================================================
// MODELS
//=============================================================================

model Media {
  id            String   @id @default(uuid())
  mediaType     String
  status        String
  fileContent   String?
  fileName      String
  transcription String?
  extractedText String?
  createdAt     DateTime @default(now())

  CommentReply CommentReply[]
  Post         Post[]
  Comment      Comment[]
  PollPost     PollPost[]
  Note         Note[]

  // Indexes
  @@index([mediaType, status], name: "idx_media_status")
  @@index([createdAt], name: "idx_media_timestamp")
}

/// Enhanced Post model combining original and new features
model Post {
  id            String  @id @default(uuid())
  authorId      String
  parentSpaceId String?

  // Basic Information
  title          String?
  content        String
  description    String?
  status         String
  workflowStatus String?
  assignedTo     String?
  contentFormat  String    @default("markdown")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  publishedAt    DateTime?

  // Post Type and Category
  postType              PostType
  category              Category?
  threadParticipantType ThreadParticipantType?

  // Author Information
  backendPlatformUserId String
  profileId             Int
  authorUsername        String
  authorProfileImage    String?
  authorAccountType     AccountType

  // Organization
  tags      String[]
  mentions  String[]
  hashtags  String[]
  topicName String?

  // Media and Files
  media              Media?       @relation(fields: [mediaId], references: [id])
  mediaId            String?
  backgroundImageUrl String?
  files              File[]

  // Engagement Metrics
  affinityScore            Int
  qualityScore             Int
  viewCount                Int   @default(0)
  userIdToAffinityScoreMap Json? // Map<String, Int>
  userIdToReportsMap       Json? // Map<String, Int>
  userIdToReactionMap      Json? // Map<String, Reaction>

  // Content Analysis
  insights                    Json?
  readingTime                 String?
  aiGeneratedQuestionResponse String?
  aiAnalysis                  Json?
  searchMetadata              Json?

  // Relations
  comments   Comment[]
  notes      Note[]
  thread     Thread?   @relation(fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  threadId   String?
  space      Space?    @relation(fields: [spaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  spaceId    String?
  channel    Channel?  @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  channelId  String?
  // Additional Features
  extra      Json? // Custom metadata
  visibility String    @default("public")
  isPinned   Boolean   @default(false)
  isArchived Boolean   @default(false)
  workflow   Json? // Workflow state
  version    Int       @default(1)

  // Performance Optimization Indexes
  @@index([spaceId, channelId], name: "idx_space_channel_composite")
  @@index([authorId, createdAt], name: "idx_author_timestamp")
  @@index([visibility, createdAt], name: "idx_content_access")
  @@index([authorId, visibility], name: "idx_author_visibility")
  @@index([spaceId, visibility, createdAt], name: "idx_space_content")
  @@index([affinityScore, createdAt], name: "idx_engagement_time")
  @@index([qualityScore, createdAt], name: "idx_quality_time")
  @@index([viewCount, createdAt], name: "idx_popularity")
  @@index([updatedAt], name: "idx_last_modified")
  @@index([publishedAt], name: "idx_publication")
  @@index([category, createdAt], name: "idx_category_time")
  @@index([postType, createdAt], name: "idx_post_type_time")
  @@index([threadId, createdAt], name: "idx_thread_time")
  @@index([status, updatedAt], name: "idx_status_time")
  @@index([workflowStatus, assignedTo], name: "idx_workflow_assignment")
  @@index([backendPlatformUserId])
}

/// Enhanced PollPost model
model PollPost {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  action    PostType
  content   String
  title     String?

  // Poll Specific
  pollOptions              String[]
  pollDistribution         Json? // Map<String, Float>
  userIdToPollResponsesMap Json? // Map<String, PollResponse>
  pollEndDate              DateTime

  // Organization
  mentions  String[]
  hashtags  String[]
  tags      String[]
  topicName String?

  // Author Info
  backendPlatformUserId String
  profileId             Int

  // Media
  media   Media?  @relation(fields: [mediaId], references: [id])
  mediaId String?

  // Relations
  comments Comment[]
  thread   Thread?   @relation(fields: [threadId], references: [id])
  threadId String?

  // Additional Features
  extra          Json?
  searchMetadata Json?
  aiAnalysis     Json?

  // Indexes
  @@index([backendPlatformUserId])
  @@index([createdAt], name: "idx_poll_created_at")
  @@index([action], name: "idx_poll_action")
  @@index([pollEndDate], name: "idx_poll_end_date")
  @@index([threadId], name: "idx_poll_thread")
  @@index([topicName], name: "idx_poll_topic")
  @@index([tags], name: "idx_poll_tags")
}

/// Space model for workspace organization
model Space {
  id          String        @id @default(uuid())
  name        String
  description String?
  type        SpaceType
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  spaceType   String
  status      String
  visibility  String
  // Relations
  members     SpaceMember[]
  channels    Channel[]
  posts       Post[]
  files       File[]

  // Hierarchy
  parentSpace   Space?  @relation("SpaceHierarchy", fields: [parentSpaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentSpaceId String?
  childSpaces   Space[] @relation("SpaceHierarchy")

  // Settings
  isPrivate   Boolean     @default(false)
  metadata    Json?
  settings    Json?
  accessLevel AccessLevel @default(ACCESS_LEVEL_ORGANIZATION)

  // Features
  searchMetadata Json?
  tags           String[]

  // Indexes
  @@index([name])
  @@index([parentSpaceId, id], name: "idx_space_hierarchy")
  @@index([spaceType, status], name: "idx_space_status")
  @@index([visibility, createdAt], name: "idx_space_visibility")
  @@index([type], name: "idx_space_type")
  @@index([createdAt], name: "idx_space_created_at")
  @@index([updatedAt], name: "idx_space_updated_at")
  @@index([accessLevel], name: "idx_space_access_level")
  @@index([isPrivate], name: "idx_space_privacy")
  @@index([tags], name: "idx_space_tags")
}

/// Channel model for content organization
model Channel {
  id          String   @id @default(uuid())
  name        String
  description String?
  spaceId     String
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String

  // Content
  posts       Post[]
  files       File[]
  pinnedPosts String[]

  // Members
  members ChannelMember[]

  // Settings
  isPrivate Boolean @default(false)
  metadata  Json?
  settings  Json?

  // Indexes
  @@index([spaceId])
  @@index([spaceId, status], name: "idx_channel_status")
  @@index([createdAt], name: "idx_channel_timestamp")
  @@index([name], name: "idx_channel_name")
  @@index([updatedAt], name: "idx_channel_updated")
  @@index([isPrivate], name: "idx_channel_privacy")
  @@index([spaceId, name], name: "idx_channel_space_name")
  @@index([spaceId, createdAt], name: "idx_channel_space_created")
  @@index([status, updatedAt], name: "idx_channel_status_updated")
}

/// Enhanced Thread model
model Thread {
  id           String   @id @default(uuid())
  postIds      String[]
  parentPostId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  posts     Post[]
  pollPosts PollPost[]

  // Additional Features
  metadata Json?
  status   String  @default("active")
  isLocked Boolean @default(false)

  // Indexes
  @@index([parentPostId])
  @@index([createdAt], name: "idx_thread_created_at")
  @@index([updatedAt], name: "idx_thread_updated_at")
  @@index([status], name: "idx_thread_status")
  @@index([isLocked], name: "idx_thread_locked")
  @@index([parentPostId, createdAt], name: "idx_thread_parent_created")
  @@index([status, updatedAt], name: "idx_thread_status_updated")
}

/// Enhanced Note model
model Note {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  authorId  String

  // Author Info
  backendPlatformUserId String
  profileId             Int
  authorUserName        String
  authorProfileImage    String?
  authorAccountType     AccountType

  // Organization
  mentions String[]
  hashtags String[]

  // Media
  media   Media?  @relation(fields: [mediaId], references: [id])
  mediaId String?

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    String
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentId String?

  // Features
  searchMetadata Json?
  aiAnalysis     Json?

  // Indexes
  @@index([postId, createdAt], name: "idx_note_post_time")
  @@index([authorId, createdAt], name: "idx_note_author_time")
  @@index([backendPlatformUserId], name: "idx_note_backend_user")
  @@index([createdAt], name: "idx_note_created_at")
  @@index([commentId], name: "idx_note_comment")
  @@index([authorAccountType], name: "idx_note_account_type")
  @@index([mentions], name: "idx_note_mentions")
  @@index([hashtags], name: "idx_note_hashtags")
}

/// Enhanced Comment model
model Comment {
  id        String   @id @default(uuid())
  authorId  String
  content   String
  createdAt DateTime @default(now())

  // Author Info
  backendPlatformUserId String
  profileId             Int
  authorUsername        String
  authorProfileImage    String?
  authorAccountType     AccountType

  // Metrics
  affinityScore            Int
  qualityScore             Int
  userIdToAffinityScoreMap Json?
  userIdToReportsMap       Json?
  userIdToReactionMap      Json?

  // Organization
  mentions String[]
  hashtags String[]

  // Media
  media     Media?   @relation(fields: [mediaId], references: [id])
  mediaId   String?

  // Relations
  replies    CommentReply[]
  notes      Note[]
  post       Post           @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId     String
  PollPost   PollPost?      @relation(fields: [pollPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pollPostId String?

  // Additional Features
  extra      Json?
  aiAnalysis Json?

  @@index([postId])
  // Indexes
  @@index([postId, createdAt], name: "idx_comment_post_time")
  @@index([authorId, createdAt], name: "idx_comment_author_time")
}

/// Enhanced CommentReply model
model CommentReply {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Author Info
  backendPlatformUserId String
  profileId             Int
  authorUsername        String
  authorProfileImage    String?
  authorAccountType     AccountType

  // Metrics
  affinityScore            Int
  qualityScore             Int
  userIdToAffinityScoreMap Json?
  userIdToReportsMap       Json?
  userIdToReactionMap      Json?

  // Organization
  mentions String[]
  hashtags String[]

  // Media
  media     Media?   @relation(fields: [mediaId], references: [id])
  mediaId   String?

  // Relations
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentId String

  // Additional Features
  extra      Json?
  aiAnalysis Json?

  // Indexes
  @@index([commentId])
  @@index([commentId, createdAt], name: "idx_reply_comment_time")
  @@index([backendPlatformUserId, createdAt], name: "idx_reply_author_time")
  @@index([createdAt], name: "idx_reply_created_at")
  @@index([authorAccountType], name: "idx_reply_account_type")
  @@index([affinityScore], name: "idx_reply_affinity")
  @@index([qualityScore], name: "idx_reply_quality")
  @@index([mentions], name: "idx_reply_mentions")
  @@index([hashtags], name: "idx_reply_hashtags")
}

/// Membership Models
model SpaceMember {
  id          String   @id @default(uuid())
  spaceId     String
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId      String
  role        String
  joinedAt    DateTime @default(now())
  status      String   @default("active")
  permissions String[]

  @@unique([spaceId, userId])
  @@index([userId], name: "idx_space_member_user")
  @@index([role], name: "idx_space_member_role")
  @@index([status], name: "idx_space_member_status")
  @@index([joinedAt], name: "idx_space_member_joined")
}

model ChannelMember {
  id        String    @id @default(uuid())
  channelId String
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String
  role      String
  joinedAt  DateTime  @default(now())
  lastRead  DateTime?

  @@unique([channelId, userId])
  @@index([userId], name: "idx_channel_member_user")
  @@index([role], name: "idx_channel_member_role")
  @@index([joinedAt], name: "idx_channel_member_joined")
  @@index([lastRead], name: "idx_channel_member_last_read")
}

/// File Management Model
model File {
  id       String       @id @default(uuid())
  name     String
  type     MediaType
  url      String
  metadata Json

  // Upload Info
  uploadedBy String
  uploadedAt DateTime @default(now())
  size       Int

  // Processing
  status    String  @default("processing")
  preview   String?
  thumbnail String?

  // Analysis
  searchMetadata Json?
  aiAnalysis     Json?

  // Relations
  posts     Post[]
  space     Space?       @relation(fields: [spaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  spaceId   String?
  channel   Channel?     @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  channelId String?

  @@index([type])
  @@index([uploadedBy], name: "idx_file_uploaded_by")
  @@index([uploadedAt], name: "idx_file_uploaded_at")
  @@index([status], name: "idx_file_status")
  @@index([size], name: "idx_file_size")
  @@index([spaceId, type], name: "idx_file_space_type")
  @@index([channelId, type], name: "idx_file_channel_type")
}